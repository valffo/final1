Учебный проект
Объект автоматизации – онлайновая система распространения билетов в театре. 
Роли
Гость.
Зарегистрированный пользователь.
Курьер.
Администратор приложения.
Схема функционирования объекта автоматизации
В один день может быть не более одной постановки пьесы. В течение планового периода времени может быть любое количество постановок одной и той же пьесы.
Зрительный зал разделен на зоны по стоимости билетов. Зарегистрированные в системе пользователи оформляют заказ билетов через систему.
Курьер связывается со зрителем и выполняет заказ. 
Сценарий
Начальная страница содержит список пьес с датами. При нажатии на пьесу отображается дополнительная информация. При нажатии на дату выполняется переход на страницу с информацией о наличии билетов. 
Страница с информацией о наличии билетов отображает количество купленных/свободных билетов каждой категории. Зарегистрированный пользователь может оформить заявку на билеты. Заказ билетов можно организовать через выбор места на графической схеме зала (опционально).
Страница подтверждения заказа. Пользователь уведомляется о сделанных заказах. 
Страница управления собственными заказами (опционально).
Страница с вводом оплат за заказанные билеты. Доступна для роли курьер. Создать отчет по неоплаченным заказам. 
Создать отчеты по выбранным клиентам, пьесам (опционально).
Модель данных
Все сущности хранятся в базе данных. Приветствуется использование MySQL или PostgreSQL. Тем не менее sqlite3 также разрешена.
Требования реализации
Разработать web–приложение средствами фреймворка Django.
На каждой странице – одинаковые хедер и футер. Хедер чувствителен к роли и содержит ссылки логина, логаута, регистрации, перехода на начальную страницу. Футер содержит контактную информацию о разработчике, дату последнего обновления и т.п.


Этапы реализации учебного web–проекта
Этап 1 - Начальная страница
При первоначальной загрузке в хедере должны отображаться гостевой статус, текущая дата и ссылки: Sign in, Registrate. 
Сделаем допущение, что у любой пьесы единственный автор и единственный жанр. Тогда в основной области можно привести список постановок, указав для каждой постановки атрибуты: жанр, автор, название, даты.
Ниже приведен один из вариантов содержимого начальной страницы.

User: guest     Today: 15.02             Sign in   Registrate 	
Comedy
A. Eykborn. Synthesizer love
3.02   15.02   27.02

Dramatic ballad
A. Dudarau. Do not leave me …
13.02   16.02   25.02   26.02

Play
A. Dudarau. Prince Vitaut
8.02   12.02   28.02

Comedy
M. Zadornov. Love adventure
17.02   24.02

Developed by Viktar Liauchuk   liauchuk@gmail.com        Last update 01.02.2014

Обработка ссылок Sign in и Registrate очевидная. При отсутствии ошибок авторизации в системе сменяется роль пользователя.
В зависимости от статуса содержимое области хедера должно изменяться. Например, у залогиненного пользователя достаточно отобразить статус и ссылку Sign out 

User: clever 	Sign out

Этап 2 - Функционал гостя и пользователя
Переход на страницу заказа должен осуществляться при клике на дату. Причем активными должны быть даты, не меньшие сегодняшней.

На странице заказа отобразить: 
хедер (в который добавить ссылку Main);
справочная информация о пьесе;
дата выбранного сеанса (как вариант, повторить с главной страницы все даты сеансов пьесы, но выбранную дату выделить без ссылки);
список категорий с информацией о наличии билетов на выбранный сеанс; а у залогиненного пользователя еще и данными о произведенных операциях и полем ввода для заказа количества билетов или их отмены;
кнопки Order, Cancel order;
футер.

Можно еще что-то актуальное, например, корзину со стоимостью.
Но не увлекаться! 
На начальном этапе главное – наличие РАБОТАЮЩЕГО функционала. 
Usability – дело вторичное, так как это учебный проект. Останется время, можно заниматься всякими дизайнами и дружественным интерфейсом.

Поля ввода и кнопки размещены на странице только у залогиненного пользователя.
После нажатия на кнопку Order занести информацию в базу данных и снова отобразить данную страницу, обновив информацию о купленных билетах на выбранный сеанс. Перед занесением информации в базу можно джава скриптом попросить пользователя подтвердить данные о заказе.
Обработка нажатия на кнопку Cancel order возможна, если заказанные билеты еще не оплачены. Обновление страницы – аналогично предыдущему случаю. 

Пример информации о сеансе.
Play
A. Dudarau. Prince Vitaut
13.02   16.02   25.02   26.02

Category
Ticket price
Total tickets
Available
Paid
Ordered
Quantity
Parterre
45 000
30
20
5
0





Balcony
30 000
15
15
0
0





…












Sum






225 000
0



	
В одном запросе можно заказать билеты или отменить заказ по нескольким категориям.
Итоги по столбцам Paid, Ordered подводятся в стоимостном выражении. По всем остальным столбцам итоги не имеют смысла. Впрочем, используя джава скрипт, можно еще подводить итог по столбцу Quantity, отслеживая сумму активного запроса.
На представление с прошедшей датой заказать билеты нельзя, а отменить можно.

Можно также изменить страницу заказов залогиненного пользователя. Вместо текстовой информации нарисовать зал с местами. Каждое место – элемент управления (чекбокс, кнопка, иконка, …). Этим и вообще продвинутым клиентским джава скриптом обеспечивается юзабилити. 
Этап 3 - Функционал курьера
Главная страница для курьера не отличается от пользовательской.
По нажатию на дату происходит переход на страницу с неоплаченными заказами. 
Верхняя часть страницы неоплаченных заказов выглядит так, как и страница заказов пользователя: 
хедер; 
справочная информация о пьесе; 
дата выбранного сеанса (как вариант, повторить с главной страницы все даты сеансов пьесы, но выбранную дату выделить без ссылки). 
Далее: 
информация для курьера о неоплаченных заказах в формате: 
чекбокс, логин, категория, дата заказа, заказанное количество, сумма, количество (поле ввода с информацией из таблицы orders, по умолчанию совпадающее с заказанным количеством);
под этим списком – кнопки: Pay order, Cancel order; ссылка Report;
внизу страницы, как и для каждой страницы – стандартный футер.

